{"version":3,"sources":["logo.svg","SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["NUMBER_OF_ARRAY_BARS","window","innerWidth","MAX_HEIGHT","innerHeight","ANIMATION_SPEED_MS","PRIMARY_COLOR","BUSY_MESSAGE","logAlert","alert","SortingVisualizer","props","state","array","isRunning","isDarkMode","this","resetArray","min","max","i","push","Math","floor","random","setState","isSorted","activate","animations","sort","length","manageChangeAnimations","start","mid","end","start2","value","index","l","r","m","merge","hSort","n","heapify","largest","auxillaryArray","low","high","pivot","j","pi","partition","quickSort","minima","id","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","deactivate","barIndex","newHeight","barStyle","height","getElementById","getElementsByTagName","className","type","onChange","changeAnimationSpeed","onClick","qSort","mergeSort","heapSort","selectionSort","bubbleSort","toggleTheme","map","idx","width","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kPAAe,I,uDCMTA,EAAuBC,OAAOC,WAAP,EAEvBC,EAAaF,OAAOG,YAAc,GAEpCC,EAAqB,EAGnBC,EAAgB,OAIhBC,EAAe,kBAyZrB,SAASC,IACLC,MAAM,iDAGKC,M,kDAzZX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,GACPC,WAAW,EACXC,YAAY,GAND,E,qDAUnB,WACIC,KAAKC,e,wBAGT,WACI,GAAID,KAAKJ,MAAME,UACXL,MAAMF,OADV,CAMA,IAFA,IA6XuBW,EAAKC,EA7XtBN,EAAQ,GAELO,EAAI,EAAGA,EAAIpB,EAAsBoB,IACtCP,EAAMQ,MA0XaH,EA1Xc,EA0XTC,EA1XYhB,EA4XrCmB,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,KA1XhDF,KAAKS,SAAS,CAAEZ,a,uBAMpB,WAEI,GAAIG,KAAKU,WACLlB,SAKJ,GADeQ,KAAKW,SAAS,aAC7B,CAEA,IAAMC,EAAa,GACbf,EAAQG,KAAKJ,MAAMC,MACzBG,KAAKa,KAAKhB,EAAO,EAAGA,EAAMiB,OAAS,EAAGF,GACtCZ,KAAKe,uBAAuBH,EAAY,EAAG,gB,mBAG/C,SAAMf,EAAOmB,EAAOC,EAAKC,EAAKN,GAC1B,IAAIO,EAASF,EAAM,EAEnB,KAAIpB,EAAMoB,IAAQpB,EAAMsB,IAKxB,KAAOH,GAASC,GAAOE,GAAUD,GAG7B,GAAIrB,EAAMmB,IAAUnB,EAAMsB,GACtBP,EAAWP,KAAK,CAAC,eAAgBW,EAAOG,IACxCP,EAAWP,KAAK,CAAC,eAAgBW,EAAOG,IACxCH,QAEC,CAMD,IALA,IAAII,EAAQvB,EAAMsB,GACdE,EAAQF,EAILE,GAASL,GACZJ,EAAWP,KAAK,CAAC,OAAQgB,EAAOxB,EAAMwB,EAAQ,KAC9CT,EAAWP,KAAK,CAAC,OAAQgB,EAAQ,EAAGD,IACpCvB,EAAMwB,GAASxB,EAAMwB,EAAQ,GAC7BA,IAEJxB,EAAMmB,GAASI,EAGfJ,IACAC,IACAE,O,kBAKZ,SAAKtB,EAAOyB,EAAGC,EAAGX,GACd,GAAIU,EAAIC,EAAG,CAEP,IAAIC,EAAKF,EAAIC,GAAM,EAEnBvB,KAAKa,KAAKhB,EAAOyB,EAAGE,EAAGZ,GACvBZ,KAAKa,KAAKhB,EAAO2B,EAAI,EAAGD,EAAGX,GAE3BZ,KAAKyB,MAAM5B,EAAOyB,EAAGE,EAAGD,EAAGX,M,sBAOnC,WAEI,GAAIZ,KAAKU,WACLlB,SAKJ,GADeQ,KAAKW,SAAS,YAC7B,CAEA,IAAMC,EAAa,GACbf,EAAQG,KAAKJ,MAAMC,MACzBG,KAAK0B,MAAM7B,EAAOe,GAClBZ,KAAKe,uBAAuBH,EAAY,EAAG,e,mBAI/C,SAAMf,EAAOe,GAGT,IAFA,IAAIe,EAAI9B,EAAMiB,OAELV,GAAKuB,GAAK,GAAK,EAAGvB,GAAK,EAAGA,IAC/BJ,KAAK4B,QAAQ/B,EAAO8B,EAAGvB,EAAGQ,GAG9B,IAAK,IAAIR,EAAIuB,EAAI,EAAGvB,EAAI,EAAGA,IAEvBQ,EAAWP,KAAK,CAAC,OAAQ,EAAGR,EAAMO,KAClCQ,EAAWP,KAAK,CAAC,OAAQD,EAAGP,EAAM,KAClCA,EAAM,GAAKA,EAAM,GAAKA,EAAMO,IAAMP,EAAMO,GAAKP,EAAM,IAEnDG,KAAK4B,QAAQ/B,EAAOO,EAAG,EAAGQ,K,qBAIlC,SAAQf,EAAO8B,EAAGvB,EAAGQ,GACjB,IAAIiB,EAAUzB,EACVkB,EAAI,EAAIlB,EAAI,EACZmB,EAAI,EAAInB,EAAI,EAGZkB,EAAIK,IACJf,EAAWP,KAAK,CAAC,eAAgBiB,EAAGO,IACpCjB,EAAWP,KAAK,CAAC,eAAgBiB,EAAGO,KAEpCP,EAAIK,GAAK9B,EAAMyB,GAAKzB,EAAMgC,KAC1BA,EAAUP,GAGVC,EAAII,IACJf,EAAWP,KAAK,CAAC,eAAgBkB,EAAGM,IACpCjB,EAAWP,KAAK,CAAC,eAAgBkB,EAAGM,KAEpCN,EAAII,GAAK9B,EAAM0B,GAAK1B,EAAMgC,KAC1BA,EAAUN,GAGVM,GAAWzB,IACXQ,EAAWP,KAAK,CAAC,OAAQD,EAAGP,EAAMgC,KAClCjB,EAAWP,KAAK,CAAC,OAAQwB,EAAShC,EAAMO,KACxCP,EAAMO,GAAKP,EAAMO,GAAKP,EAAMgC,IAAYhC,EAAMgC,GAAWhC,EAAMO,IAE/DJ,KAAK4B,QAAQ/B,EAAO8B,EAAGE,EAASjB,M,wBAQxC,WAEI,GAAIZ,KAAKU,WACLlB,SAKJ,GADeQ,KAAKW,SAAS,cAC7B,CAKA,IAHA,IAAMC,EAAa,GACbkB,EAAiB9B,KAAKJ,MAAMC,MAEzBwB,EAAQ,EAAGA,EAAQS,EAAehB,OAAQO,IAC/C,IAAK,IAAIjB,EAAI,EAAGA,EAAI0B,EAAehB,OAASO,EAAQ,IAAKjB,EAGrDQ,EAAWP,KAAK,CAAC,eAAgBD,EAAGA,EAAI,IACxCQ,EAAWP,KAAK,CAAC,eAAgBD,EAAGA,EAAI,IAEpC0B,EAAe1B,GAAK0B,EAAe1B,EAAI,KACvCQ,EAAWP,KAAK,CAAC,OAAQD,EAAG0B,EAAe1B,EAAI,KAC/CQ,EAAWP,KAAK,CAAC,OAAQD,EAAI,EAAG0B,EAAe1B,KAC/C0B,EAAe1B,GAAK0B,EAAe1B,GAAK0B,EAAe1B,EAAI,IAAM0B,EAAe1B,EAAI,GAAK0B,EAAe1B,KAIpHJ,KAAKe,uBAAuBH,EAAY,EAAG,iB,uBAK/C,SAAUf,EAAOkC,EAAKC,EAAMpB,GAUxB,IAPA,IAAIqB,EAAQpC,EAAMmC,GAKd5B,EAAK2B,EAAM,EAENG,EAAIH,EAAKG,GAAKF,EAAO,EAAGE,IAI7BtB,EAAWP,KAAK,CAAC,eAAgB6B,EAAGF,IACpCpB,EAAWP,KAAK,CAAC,eAAgB6B,EAAGF,IAChCnC,EAAMqC,GAAKD,IAIX7B,IACAQ,EAAWP,KAAK,CAAC,OAAQD,EAAGP,EAAMqC,KAClCtB,EAAWP,KAAK,CAAC,OAAQ6B,EAAGrC,EAAMO,KAClCP,EAAMO,GAAKP,EAAMO,GAAKP,EAAMqC,IAAMrC,EAAMqC,GAAKrC,EAAMO,KAM3D,OAHAQ,EAAWP,KAAK,CAAC,OAAQD,EAAI,EAAGP,EAAMmC,KACtCpB,EAAWP,KAAK,CAAC,OAAQ2B,EAAMnC,EAAMO,EAAI,KACzCP,EAAMO,EAAI,GAAKP,EAAMO,EAAI,GAAKP,EAAMmC,IAASnC,EAAMmC,GAAQnC,EAAMO,EAAI,IAC9DA,EAAI,I,uBAGf,SAAUP,EAAOkC,EAAKC,EAAMpB,GACxB,GAAImB,EAAMC,EAAM,CAGZ,IAAIG,EAAKnC,KAAKoC,UAAUvC,EAAOkC,EAAKC,EAAMpB,GAG1CZ,KAAKqC,UAAUxC,EAAOkC,EAAKI,EAAK,EAAGvB,GACnCZ,KAAKqC,UAAUxC,EAAOsC,EAAK,EAAGH,EAAMpB,M,mBAI5C,WAEI,GAAIZ,KAAKU,WACLlB,SAKJ,GADeQ,KAAKW,SAAS,aAC7B,CAEA,IAAMC,EAAa,GACbkB,EAAiB9B,KAAKJ,MAAMC,MAClCG,KAAKqC,UAAUP,EAAgB,EAAGA,EAAehB,OAAS,EAAGF,GAC7DZ,KAAKe,uBAAuBH,EAAY,EAAG,gB,2BAM/C,WAEI,GAAIZ,KAAKU,WACLlB,SAKJ,GADeQ,KAAKW,SAAS,iBAC7B,CAKA,IAHA,IAAMC,EAAa,GACbkB,EAAiB9B,KAAKJ,MAAMC,MAEzBwB,EAAQ,EAAGA,EAAQS,EAAehB,OAAQO,IAAS,CAExD,IADA,IAAIiB,EAASjB,EACJjB,EAAIiB,EAAQ,EAAGjB,EAAI0B,EAAehB,SAAUV,EAGjDQ,EAAWP,KAAK,CAAC,eAAgBD,EAAGkC,IACpC1B,EAAWP,KAAK,CAAC,eAAgBD,EAAGkC,IAChCR,EAAe1B,GAAK0B,EAAeQ,KACnCA,EAASlC,GAEbkC,GAAUjB,IACVT,EAAWP,KAAK,CAAC,OAAQgB,EAAOS,EAAeQ,KAC/C1B,EAAWP,KAAK,CAAC,OAAQiC,EAAQR,EAAeT,KAChDS,EAAeT,GAASS,EAAeT,GAASS,EAAeQ,IAAWR,EAAeQ,GAAUR,EAAeT,KAG1HrB,KAAKe,uBAAuBH,EAAY,EAAG,oB,oCAK/C,SAAuBA,EAAYQ,EAAOmB,GACtC,IAD2C,IAAD,kBACjCnC,GACL,IAAMoC,EAAoC,gBAApB5B,EAAWR,GAAG,IAA4C,gBAApBQ,EAAWR,GAAG,GACpEqC,EAAYC,SAASC,uBAAuB,aAClD,IAAsB,IAAlBH,EAAwB,CACxB,IAAMI,EAA6B,gBAApBhC,EAAWR,GAAG,GApTrB,MAoT+Dd,EACvE,cAAgDsB,EAAWR,GAA3D,GAAoByC,GAApB,WAAiCC,EAAjC,KACMC,EAAcN,EAAUI,GAAaG,MACrCC,EAAcR,EAAUK,GAAaE,MAC3CE,YAAW,WACPH,EAAYI,gBAAkBP,EAC9BK,EAAYE,gBAAkBP,EAC1BxC,GAAKQ,EAAWE,OAAS,GACzB,EAAKsC,WAAWb,KACrBnC,EAAIf,OAEN,CACD,kBAAoCuB,EAAWR,GAA/C,GAAaiD,GAAb,WAAuBC,EAAvB,KACA,IAAkB,IAAdD,EACA,iBAEJ,IAAME,EAAWd,EAAUY,GAAUL,MACrCE,YAAW,WACPK,EAASC,OAAT,UAAqBF,EAArB,MACIlD,GAAKQ,EAAWE,OAAS,GACzB,EAAKsC,WAAWb,KACrBnC,EAAIf,KAzBNe,EAAI,EAAGA,EAAIQ,EAAWE,OAAQV,IAAK,EAAnCA,K,sBA8Bb,SAASmC,GACL,OAAIvC,KAAKJ,MAAME,WACXL,MAAMF,IACC,IAEXS,KAAKJ,MAAME,WAAY,EACvB4C,SAASe,eAAelB,GAAIS,MAAMG,gBAAkB,WAC7C,K,wBAGX,SAAWZ,GACPvC,KAAKJ,MAAME,WAAY,EACvB4C,SAASe,eAAelB,GAAIS,MAAMG,gBAAkB,Y,yBAGxD,WACQnD,KAAKJ,MAAMG,WACX2C,SAASgB,qBAAqB,QAAQ,GAAGV,MAAMG,gBAAkB,QAEjET,SAASgB,qBAAqB,QAAQ,GAAGV,MAAMG,gBAAkB,UAErEnD,KAAKJ,MAAMG,YAAcC,KAAKJ,MAAMG,a,kCAGxC,WACIV,EAAqB,EAAIqD,SAASe,eAAe,mBAAmBrC,Q,sBAGxE,WACI,IAAK,IAAIhB,EAAI,EAAGA,EAAIJ,KAAKJ,MAAMC,MAAMiB,OAAS,EAAGV,IAC7C,GAAIJ,KAAKJ,MAAMC,MAAMO,GAAKJ,KAAKJ,MAAMC,MAAMO,EAAI,GAC3C,OAAO,EAEf,OAAO,I,oBAGX,WAAU,IAAD,OAEGP,EAAUG,KAAKJ,MAAfC,MAER,OACI,sBAAK8D,UAAU,sBAAf,UACI,sBAAKA,UAAU,aAAf,UACI,oEAA4C,uBAAOC,KAAK,QAAQ1D,IAAI,IAAIC,IAAI,IAAIoC,GAAG,kBAAkBsB,SAAU,kBAAM,EAAKC,0BAA1H,OACA,wBAAQH,UAAU,gBAAgBpB,GAAG,cAAcwB,QAAS,kBAAM,EAAK9D,cAAvE,4BACA,wBAAQ0D,UAAU,gBAAgBpB,GAAG,YAAYwB,QAAS,kBAAM,EAAKC,SAArE,wBACA,wBAAQL,UAAU,gBAAgBpB,GAAG,YAAYwB,QAAS,kBAAM,EAAKE,aAArE,wBACA,wBAAQN,UAAU,gBAAgBpB,GAAG,WAAWwB,QAAS,kBAAM,EAAKG,YAApE,uBACA,wBAAQP,UAAU,gBAAgBpB,GAAG,gBAAgBwB,QAAS,kBAAM,EAAKI,iBAAzE,4BACA,wBAAQR,UAAU,gBAAgBpB,GAAG,aAAawB,QAAS,kBAAM,EAAKK,cAAtE,yBACA,wBAAQT,UAAU,gBAAgBpB,GAAG,cAAcwB,QAAS,kBAAM,EAAKM,eAAvE,6BAGJ,qBAAKV,UAAU,kBAAf,SACK9D,EAAMyE,KAAI,SAAClD,EAAOmD,GAAR,OACP,qBACIZ,UAAU,YAEVX,MAAO,CACHG,gBAAiB7D,EACjBkF,MAAM,GAAD,OArZnB,EAqZmB,MACLhB,OAAO,GAAD,OAAKpC,EAAL,QAJLmD,e,GAnYDE,IAAMC,WCPvBC,MARf,WACE,OACE,qBAAKhB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAASe,eAAe,SAM1BmB,M","file":"static/js/main.d42b927e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst BAR_WIDTH = 5;\r\n\r\nconst NUMBER_OF_ARRAY_BARS = window.innerWidth / (BAR_WIDTH + 3);\r\n\r\nconst MAX_HEIGHT = window.innerHeight - 75;\r\n\r\nlet ANIMATION_SPEED_MS = 1;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'aqua';\r\n\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nconst BUSY_MESSAGE = \"Busy Right Now!\";\r\n\r\nclass SortingVisualizer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            isRunning: false,\r\n            isDarkMode: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        if (this.state.isRunning) {\r\n            alert(BUSY_MESSAGE);\r\n            return;\r\n        }\r\n        const array = [];\r\n\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, MAX_HEIGHT));\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Merge Sort Algorithm Starts From Here\r\n    mergeSort() {\r\n\r\n        if (this.isSorted()) {\r\n            logAlert();\r\n            return;\r\n        }\r\n\r\n        const result = this.activate(\"mergeSort\");\r\n        if (!result) return;\r\n\r\n        const animations = [];\r\n        const array = this.state.array;\r\n        this.sort(array, 0, array.length - 1, animations);\r\n        this.manageChangeAnimations(animations, 2, \"mergeSort\");\r\n    }\r\n\r\n    merge(array, start, mid, end, animations) {\r\n        let start2 = mid + 1;\r\n        // If the direct merge is already sorted\r\n        if (array[mid] <= array[start2]) {\r\n            return;\r\n        }\r\n        // Two pointers to maintain start\r\n        // of both arrays to merge\r\n        while (start <= mid && start2 <= end) {\r\n\r\n            // If element 1 is in right place\r\n            if (array[start] <= array[start2]) {\r\n                animations.push([\"comparision1\", start, start2]);\r\n                animations.push([\"comparision2\", start, start2]);\r\n                start++;\r\n            }\r\n            else {\r\n                let value = array[start2];\r\n                let index = start2;\r\n\r\n                // Shift all the elements between element 1\r\n                // element 2, right by 1.\r\n                while (index != start) {\r\n                    animations.push([\"swap\", index, array[index - 1]]);\r\n                    animations.push([\"swap\", index - 1, value]);\r\n                    array[index] = array[index - 1];\r\n                    index--;\r\n                }\r\n                array[start] = value;\r\n\r\n                // Update all the pointers\r\n                start++;\r\n                mid++;\r\n                start2++;\r\n            }\r\n        }\r\n    }\r\n\r\n    sort(array, l, r, animations) {\r\n        if (l < r) {\r\n            // Find the middle point\r\n            let m = (l + r) >> 1;\r\n            // Sort first and second halves\r\n            this.sort(array, l, m, animations);\r\n            this.sort(array, m + 1, r, animations);\r\n            // Merge the sorted halves\r\n            this.merge(array, l, m, r, animations);\r\n        }\r\n    }\r\n    // Merge Sort Algorithm Ends Here\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Heap Sort Algorithm Starts From Here\r\n    heapSort() {\r\n\r\n        if (this.isSorted()) {\r\n            logAlert();\r\n            return;\r\n        }\r\n\r\n        const result = this.activate(\"heapSort\");\r\n        if (!result) return;\r\n\r\n        const animations = [];\r\n        const array = this.state.array;\r\n        this.hSort(array, animations);\r\n        this.manageChangeAnimations(animations, 2, \"heapSort\");\r\n    }\r\n\r\n    //Implementation of Heap Sort\r\n    hSort(array, animations) {\r\n        let n = array.length;\r\n        // Build heap (rearrange array)\r\n        for (let i = (n >> 1) - 1; i >= 0; i--) {\r\n            this.heapify(array, n, i, animations);\r\n        }\r\n        // One by one extract an element from heap\r\n        for (let i = n - 1; i > 0; i--) {\r\n            // Move current root to end\r\n            animations.push([\"swap\", 0, array[i]]);\r\n            animations.push([\"swap\", i, array[0]]);\r\n            array[0] = array[0] + array[i] - (array[i] = array[0]);\r\n            // call max heapify on the reduced heap\r\n            this.heapify(array, i, 0, animations);\r\n        }\r\n    }\r\n\r\n    heapify(array, n, i, animations) {\r\n        let largest = i; // Initialize largest as root\r\n        let l = 2 * i + 1; // left = 2*i + 1\r\n        let r = 2 * i + 2; // right = 2*i + 2\r\n\r\n        // If left child is larger than root\r\n        if (l < n) {\r\n            animations.push([\"comparision1\", l, largest]);\r\n            animations.push([\"comparision2\", l, largest]);\r\n        }\r\n        if (l < n && array[l] > array[largest])\r\n            largest = l;\r\n\r\n        // If right child is larger than largest so far\r\n        if (r < n) {\r\n            animations.push([\"comparision1\", r, largest]);\r\n            animations.push([\"comparision2\", r, largest]);\r\n        }\r\n        if (r < n && array[r] > array[largest])\r\n            largest = r;\r\n\r\n        // If largest is not root\r\n        if (largest != i) {\r\n            animations.push([\"swap\", i, array[largest]]);\r\n            animations.push([\"swap\", largest, array[i]]);\r\n            array[i] = array[i] + array[largest] - (array[largest] = array[i]);\r\n            // Recursively heapify the affected sub-tree\r\n            this.heapify(array, n, largest, animations);\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    bubbleSort() {\r\n\r\n        if (this.isSorted()) {\r\n            logAlert();\r\n            return;\r\n        }\r\n\r\n        const result = this.activate(\"bubbleSort\");\r\n        if (!result) return;\r\n\r\n        const animations = [];\r\n        const auxillaryArray = this.state.array;\r\n\r\n        for (let index = 0; index < auxillaryArray.length; index++) {\r\n            for (let i = 0; i < auxillaryArray.length - index - 1; ++i) {\r\n                //comparing i and i + 1 indexes...\r\n                //comparision two is just to revert the color\r\n                animations.push([\"comparision1\", i, i + 1]);\r\n                animations.push([\"comparision2\", i, i + 1]);\r\n\r\n                if (auxillaryArray[i] > auxillaryArray[i + 1]) {\r\n                    animations.push([\"swap\", i, auxillaryArray[i + 1]]);\r\n                    animations.push([\"swap\", i + 1, auxillaryArray[i]]);\r\n                    auxillaryArray[i] = auxillaryArray[i] + auxillaryArray[i + 1] - (auxillaryArray[i + 1] = auxillaryArray[i]);\r\n                }\r\n            }\r\n        }\r\n        this.manageChangeAnimations(animations, 1, \"bubbleSort\");\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    partition(array, low, high, animations) {\r\n\r\n        // pivot\r\n        let pivot = array[high];\r\n\r\n        // Index of smaller element and\r\n        // indicates the right position\r\n        // of pivot found so far\r\n        let i = (low - 1);\r\n\r\n        for (let j = low; j <= high - 1; j++) {\r\n\r\n            // If current element is smaller\r\n            // than the pivot\r\n            animations.push(['comparision1', j, high]);\r\n            animations.push(['comparision2', j, high]);\r\n            if (array[j] < pivot) {\r\n\r\n                // Increment index of\r\n                // smaller element\r\n                i++;\r\n                animations.push(['swap', i, array[j]]);\r\n                animations.push(['swap', j, array[i]]);\r\n                array[i] = array[i] + array[j] - (array[j] = array[i]);\r\n            }\r\n        }\r\n        animations.push(['swap', i + 1, array[high]]);\r\n        animations.push(['swap', high, array[i + 1]]);\r\n        array[i + 1] = array[i + 1] + array[high] - (array[high] = array[i + 1]);\r\n        return i + 1;\r\n    }\r\n\r\n    quickSort(array, low, high, animations) {\r\n        if (low < high) {\r\n            // pi is partitioning index, arr[p]\r\n            // is now at right place\r\n            let pi = this.partition(array, low, high, animations);\r\n            // Separately sort elements before\r\n            // partition and after partition\r\n            this.quickSort(array, low, pi - 1, animations);\r\n            this.quickSort(array, pi + 1, high, animations);\r\n        }\r\n    }\r\n\r\n    qSort() {\r\n\r\n        if (this.isSorted()) {\r\n            logAlert();\r\n            return;\r\n        }\r\n\r\n        const result = this.activate(\"quickSort\");\r\n        if (!result) return;\r\n\r\n        const animations = [];\r\n        const auxillaryArray = this.state.array;\r\n        this.quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n        this.manageChangeAnimations(animations, 1, \"quickSort\");\r\n\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    selectionSort() {\r\n\r\n        if (this.isSorted()) {\r\n            logAlert();\r\n            return;\r\n        }\r\n\r\n        const result = this.activate(\"selectionSort\");\r\n        if (!result) return;\r\n\r\n        const animations = [];\r\n        const auxillaryArray = this.state.array;\r\n\r\n        for (let index = 0; index < auxillaryArray.length; index++) {\r\n            let minima = index;\r\n            for (let i = index + 1; i < auxillaryArray.length; ++i) {\r\n                //comparing i and minima indexes...\r\n                //comparision two is just to revert the color\r\n                animations.push([\"comparision1\", i, minima]);\r\n                animations.push([\"comparision2\", i, minima]);\r\n                if (auxillaryArray[i] < auxillaryArray[minima])\r\n                    minima = i;\r\n            }\r\n            if (minima != index) {\r\n                animations.push([\"swap\", index, auxillaryArray[minima]]);\r\n                animations.push([\"swap\", minima, auxillaryArray[index]]);\r\n                auxillaryArray[index] = auxillaryArray[index] + auxillaryArray[minima] - (auxillaryArray[minima] = auxillaryArray[index]);\r\n            }\r\n        }\r\n        this.manageChangeAnimations(animations, 1, \"selectionSort\");\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    manageChangeAnimations(animations, value, id) {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                    if (i == animations.length - 1)\r\n                        this.deactivate(id);\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                    if (i == animations.length - 1)\r\n                        this.deactivate(id);\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    activate(id) {\r\n        if (this.state.isRunning) {\r\n            alert(BUSY_MESSAGE);\r\n            return false;\r\n        }\r\n        this.state.isRunning = true;\r\n        document.getElementById(id).style.backgroundColor = '#4CAF50';\r\n        return true;\r\n    }\r\n\r\n    deactivate(id) {\r\n        this.state.isRunning = false;\r\n        document.getElementById(id).style.backgroundColor = '#282c34';\r\n    }\r\n\r\n    toggleTheme() {\r\n        if (this.state.isDarkMode)\r\n            document.getElementsByTagName(\"body\")[0].style.backgroundColor = 'white';\r\n        else\r\n            document.getElementsByTagName(\"body\")[0].style.backgroundColor = '#282c34';\r\n\r\n        this.state.isDarkMode = !this.state.isDarkMode;\r\n    }\r\n\r\n    changeAnimationSpeed() {\r\n        ANIMATION_SPEED_MS = 6 - document.getElementById(\"animation_speed\").value;\r\n    }\r\n\r\n    isSorted() {\r\n        for (let i = 0; i < this.state.array.length - 1; i++) {\r\n            if (this.state.array[i] > this.state.array[i + 1])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <div className=\"directive-container\">\r\n                <div className=\"header-box\">\r\n                    <label> &nbsp; &nbsp;Animation Speed &nbsp; <input type=\"range\" min=\"1\" max=\"5\" id=\"animation_speed\" onChange={() => this.changeAnimationSpeed()} /> </label>\r\n                    <button className=\"button-custom\" id=\"genNewArray\" onClick={() => this.resetArray()}>Generate Array</button>\r\n                    <button className=\"button-custom\" id=\"quickSort\" onClick={() => this.qSort()}>Quick Sort</button>\r\n                    <button className=\"button-custom\" id=\"mergeSort\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button className=\"button-custom\" id=\"heapSort\" onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button className=\"button-custom\" id=\"selectionSort\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                    <button className=\"button-custom\" id=\"bubbleSort\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                    <button className=\"button-custom\" id=\"toggleTheme\" onClick={() => this.toggleTheme()}>Toggle Theme</button>\r\n                </div>\r\n\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: PRIMARY_COLOR,\r\n                                width: `${BAR_WIDTH}px`,\r\n                                height: `${value}px`\r\n                            }}></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction logAlert() {\r\n    alert(\"Array is Already Sorted!.. Generate New Array\");\r\n}\r\n\r\nexport default SortingVisualizer;","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}