{"version":3,"sources":["logo.svg","SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["PRIMARY_COLOR","SortingVisualizer","props","state","array","this","resetArray","min","max","i","push","Math","floor","random","setState","animations","sort","length","manageChangeAnimations","start","mid","end","start2","value","index","l","r","m","merge","hSort","n","heapify","largest","auxillaryArray","minima","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","className","id","onClick","mergeSort","heapSort","selectionSort","bubbleSort","map","idx","width","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.34df3fa0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 170;\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\nconst BAR_WIDTH = 5;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'aqua';\r\n\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nconst BUSY = \"Busy Right Now!\";\r\n\r\nclass SortingVisualizer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 700));\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Merge Sort Algorithm Starts From Here\r\n    mergeSort() {\r\n        const animations = [];\r\n        const array = this.state.array;\r\n        this.sort(array, 0, array.length - 1, animations);\r\n        this.manageChangeAnimations(animations, 2);\r\n    }\r\n\r\n    merge(array, start, mid, end, animations) {\r\n        let start2 = mid + 1;\r\n        // If the direct merge is already sorted\r\n        if (array[mid] <= array[start2]) {\r\n            return;\r\n        }\r\n        // Two pointers to maintain start\r\n        // of both arrays to merge\r\n        while (start <= mid && start2 <= end) {\r\n\r\n            // If element 1 is in right place\r\n            if (array[start] <= array[start2]) {\r\n                animations.push([\"comparision1\", start, start2]);\r\n                animations.push([\"comparision2\", start, start2]);\r\n                start++;\r\n            }\r\n            else {\r\n                let value = array[start2];\r\n                let index = start2;\r\n\r\n                // Shift all the elements between element 1\r\n                // element 2, right by 1.\r\n                while (index != start) {\r\n                    animations.push([\"swap\", index, array[index - 1]]);\r\n                    animations.push([\"swap\", index - 1, value]);\r\n                    array[index] = array[index - 1];\r\n                    index--;\r\n                }\r\n                array[start] = value;\r\n\r\n                // Update all the pointers\r\n                start++;\r\n                mid++;\r\n                start2++;\r\n            }\r\n        }\r\n    }\r\n\r\n    sort(array, l, r, animations) {\r\n        if (l < r) {\r\n            // Find the middle point\r\n            let m = (l + r) >> 1;\r\n            // Sort first and second halves\r\n            this.sort(array, l, m, animations);\r\n            this.sort(array, m + 1, r, animations);\r\n            // Merge the sorted halves\r\n            this.merge(array, l, m, r, animations);\r\n        }\r\n    }\r\n    // Merge Sort Algorithm Ends Here\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    // Heap Sort Algorithm Starts From Here\r\n    heapSort() {\r\n        const animations = [];\r\n        const array = this.state.array;\r\n        this.hSort(array, animations);\r\n        this.manageChangeAnimations(animations, 2);\r\n    }\r\n\r\n    //Implementation of Heap Sort\r\n    hSort(array, animations) {\r\n        let n = array.length;\r\n        // Build heap (rearrange array)\r\n        for (let i = (n >> 1) - 1; i >= 0; i--) {\r\n            this.heapify(array, n, i, animations);\r\n        }\r\n        // One by one extract an element from heap\r\n        for (let i = n - 1; i > 0; i--) {\r\n            // Move current root to end\r\n            animations.push([\"swap\", 0, array[i]]);\r\n            animations.push([\"swap\", i, array[0]]);\r\n            array[0] = array[0] + array[i] - (array[i] = array[0]);\r\n            // call max heapify on the reduced heap\r\n            this.heapify(array, i, 0, animations);\r\n        }\r\n    }\r\n\r\n    heapify(array, n, i, animations) {\r\n        let largest = i; // Initialize largest as root\r\n        let l = 2 * i + 1; // left = 2*i + 1\r\n        let r = 2 * i + 2; // right = 2*i + 2\r\n\r\n        // If left child is larger than root\r\n        if (l < n) {\r\n            animations.push([\"comparision1\", l, largest]);\r\n            animations.push([\"comparision2\", l, largest]);\r\n        }\r\n        if (l < n && array[l] > array[largest])\r\n            largest = l;\r\n\r\n        // If right child is larger than largest so far\r\n        if (r < n) {\r\n            animations.push([\"comparision1\", r, largest]);\r\n            animations.push([\"comparision2\", r, largest]);\r\n        }\r\n        if (r < n && array[r] > array[largest])\r\n            largest = r;\r\n\r\n        // If largest is not root\r\n        if (largest != i) {\r\n            animations.push([\"swap\", i, array[largest]]);\r\n            animations.push([\"swap\", largest, array[i]]);\r\n            array[i] = array[i] + array[largest] - (array[largest] = array[i]);\r\n            // Recursively heapify the affected sub-tree\r\n            this.heapify(array, n, largest, animations);\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    bubbleSort() {\r\n\r\n        const animations = [];\r\n        const auxillaryArray = this.state.array;\r\n\r\n        for (let index = 0; index < auxillaryArray.length; index++) {\r\n            for (let i = 0; i < auxillaryArray.length - index - 1; ++i) {\r\n                //comparing i and i + 1 indexes...\r\n                //comparision two is just to revert the color\r\n                animations.push([\"comparision1\", i, i + 1]);\r\n                animations.push([\"comparision2\", i, i + 1]);\r\n\r\n                if (auxillaryArray[i] > auxillaryArray[i + 1]) {\r\n                    animations.push([\"swap\", i, auxillaryArray[i + 1]]);\r\n                    animations.push([\"swap\", i + 1, auxillaryArray[i]]);\r\n                    auxillaryArray[i] = auxillaryArray[i] + auxillaryArray[i + 1] - (auxillaryArray[i + 1] = auxillaryArray[i]);\r\n                }\r\n            }\r\n        }\r\n        this.manageChangeAnimations(animations, 1);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    selectionSort() {\r\n\r\n        const animations = [];\r\n        const auxillaryArray = this.state.array;\r\n\r\n        for (let index = 0; index < auxillaryArray.length; index++) {\r\n            let minima = index;\r\n            for (let i = index + 1; i < auxillaryArray.length; ++i) {\r\n                //comparing i and minima indexes...\r\n                //comparision two is just to revert the color\r\n                animations.push([\"comparision1\", i, minima]);\r\n                animations.push([\"comparision2\", i, minima]);\r\n                if (auxillaryArray[i] < auxillaryArray[minima])\r\n                    minima = i;\r\n            }\r\n            if (minima != index) {\r\n                animations.push([\"swap\", index, auxillaryArray[minima]]);\r\n                animations.push([\"swap\", minima, auxillaryArray[index]]);\r\n                auxillaryArray[index] = auxillaryArray[index] + auxillaryArray[minima] - (auxillaryArray[minima] = auxillaryArray[index]);\r\n            }\r\n        }\r\n        this.manageChangeAnimations(animations, 1);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    manageChangeAnimations(animations, value) {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <div className=\"directive-container\">\r\n                <div className=\"header-box\">\r\n                    <button className=\"button-custom\" id=\"genNewArray\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                    <button className=\"button-custom\" id=\"mergeSort\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button className=\"button-custom\" id=\"heapSort\" onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button className=\"button-custom\" id=\"selectionSort\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                    <button className=\"button-custom\" id=\"bubbleSort\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: PRIMARY_COLOR,\r\n                                width: `${BAR_WIDTH}px`,\r\n                                height: `${value}px`\r\n                            }}></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}